from projects.Kofile.Lib.test_parent import ApiTestParent
from runner import run_test

description = """
"""

tags = ['API']


class test(ApiTestParent):                                                                           # noqa
    def __init__(self, data):
        super(test, self).__init__(data, __name__)

    @property
    def post_data(self):
        data = self.api_test_data.save_document_item_details_data.copy()
        data["documentItem"]["DocumentId"] = self.get("document_id")
        data["documentItem"]["Year"] = self.now.strftime("%Y")
        data["documentItem"]["Scanned"] = self.api_test_data.pages
        data["documentItem"]["ScanDate"] = self.get("scan_date")
        data["documentItem"]["Path"] = self.get("azure_file_path")
        data["documentItem"]["ScanTaskId"] = self.get("scanner_id")
        data["documentItem"]["RecordedYear"] = self.now.strftime("%Y-01-01T00:00:00")
        data["DocumentId"] = self.get("document_id")
        data["DocumentGroup"]["Id"] = self.api_test_data.doc_group["id"]
        data["DocumentGroup"]["Name"] = self.api_test_data.doc_group["name"]
        data["DocumentType"]["Key"] = self.api_test_data.doc_type["id"]
        data["DocumentType"]["Value"] = self.api_test_data.doc_type["name"]
        data["OrderNumber"] = self.get("order_number")
        data["Number"] = self.get("instrument_number")
        data["Year"] = self.now.strftime("%Y")
        data["Pages"] = self.api_test_data.pages
        data["Scanned"] = self.api_test_data.pages
        data["Path"] = self.get("azure_file_path")
        data["ScanDate"] = self.get("scan_date")
        data["ScanTaskId"] = self.get("scanner_id")
        return data

    @property
    def params(self):
        return {
            'isReprocessing': 'false',
            'isReCapture': 'false',
            'isAdminSuspend': 'false',
            'isCaptureReview': 'false',
            'isUpload': 'false',
        }

    @property
    def schema(self):
        return {
            "type": "object",
            "properties": {
                "updatedDocument": {"type": "object", "properties": {
                    "DocumentGroup": {"type": "object", "properties": {
                        "Id": {"type": "number", "value": self.api_test_data.doc_group["id"]},
                        "Name": {"type": "string", "value": self.api_test_data.doc_group["name"]},
                        "Code": {"type": "null"},
                        "ConfigId": {"type": "null"},
                        "InternetAttachmentsAccess": {"type": "boolean", "value": False},
                        "IntranetAttachmentsAccess": {"type": "boolean", "value": False},
                        "IsConsolidationEnabled": {"type": "boolean", "value": False},
                        "IsAutoGenerated": {"type": "boolean", "value": True},
                    }},
                    "DocumentType": {"type": "object", "properties": {
                        "Key": {"type": "number", "value": self.api_test_data.doc_type["id"]},
                        "Value": {"type": "string", "value": self.api_test_data.doc_type["name"]}
                    }},
                    "DocumentId": {"type": "number", "value": self.get("document_id")},
                    "OrderId": {"type": "number", "value": self.get("order_id")},
                    "OrderItemId": {"type": "number", "value": self.get("second_oit_id")},
                    "OrderNumber": {"type": "string", "value": self.get("order_number")},
                    "Number": {"type": "string", "value": self.get("instrument_number")},
                    "OrderItemTypeId": {"type": "number", "value": 1},
                    "Sequence": {"type": "number", "value": 1},
                    "SeparationType": {"type": "number", "value": 1},
                    "Pages": {"type": "number", "value": self.api_test_data.pages},
                    "Scanned": {"type": "number", "value": self.api_test_data.pages},
                    "ApplicationNumber": {"type": "null"},
                    "Book": {"type": "null"},
                    "Content": {"type": "null"},
                    "ReprocessingReason": {"type": "null"},
                    "ReprocessingRemarks": {"type": "null"},
                    "RelativePathKind": {"type": "null"},
                    "Document": {"type": "null"},
                    "pageList": {"type": "null"},
                    "Suffix": {"type": "null"},
                    "RecaptureAttachmentName": {"type": "null"},
                    "Year": {"type": "string", "value": self.now.strftime("%Y")},
                    "Status": {"type": "string", "value": "Scanned"},
                    "ScanDate": {"type": "string", "value": self.get("scan_date")},
                    "Path": {"type": "string", "value": self.get("azure_file_path")},
                    "ScanTaskId": {"type": "number", "value": self.get("scanner_id")},
                    "OrderItemTypeIdIsAllowed": {"type": "boolean", "value": True},
                    "NeedToUpdatePath": {"type": "boolean", "value": True},
                    "IsNewOrderDocument": {"type": "boolean", "value": False},
                    "IsDocumentMapped": {"type": "boolean", "value": False},
                    "IsOnRecaptureOrCanceled": {"type": "boolean", "value": False},
                    "CaptureAndIndexAvailable": {"type": "boolean", "value": False},
                    "IsPurgeAvaliable": {"type": "boolean", "value": False},
                    "IsUploadable": {"type": "boolean", "value": False},
                    "HasOrderItemWithPriorStep": {"type": "boolean", "value": False},
                    "IsHistoricalDocumentForCapture": {"type": "boolean", "value": False},
                    "HasSystemAttachmentForCapture": {"type": "boolean", "value": False},
                    "FileSize": {"type": "number", "value": 0},
                    "RecordedYear": {"type": "string", "value": self.now.strftime("%Y-01-01T00:00:00")},
                }},
                "documentIdsToRemove": {"type": "array"}
            }
        }

    def __before__(self):
        self.run_dependencies(("order_number", "delete_oit", "instrument_number", "document_id",
                               "azure_file_path", "scan_date"))

    def __test__(self):
        self.now = self.datetime.now()
        self.set_content_type('application/json')
        self.response = self.session.post(self.get_url(self.api_urls.SaveDocumentItemDetails), json=self.post_data,
                                          params=self.params)
        assert self.response.status_code == 200, f"Actual response status: {self.response.status_code}"
        self.validate(instance=self.response.json(), schema=self.schema)
        self.set("document_saved", True)


if __name__ == '__main__':
    run_test(__file__, browser="none")
