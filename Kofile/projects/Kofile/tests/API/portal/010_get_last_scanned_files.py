from projects.Kofile.Lib.test_parent import ApiTestParent
from runner import run_test

description = """
"""

tags = ['API']


class test(ApiTestParent):  # noqa
    def __init__(self, data):
        super(test, self).__init__(data, __name__)

    @property
    def post_data(self):
        return {
            'scannerTaskId': self.get("portal_scanner_id"),
            'currentDocsCount': '0',
            'selectedFileId': '0',
        }

    @property
    def schema(self):
        now = self.datetime.now()
        return {
            "type": "object",
            "properties": {
                "ScanIsFinished": {"type": "boolean", "value": True},
                "scannedFiles": {"type": "array", "items": {
                    "type": "object",
                    "properties": {
                        "DocumentGroup": {"type": "object",
                                          "properties": {
                                              "Id": {"type": ["number", "null"]},
                                              "Code": {"type": "null"},
                                              "Name": {"type": "null"},
                                              "ConfigId": {"type": "null"},
                                              "IsAutoGenerated": {"type": "null"},
                                              "InternetAttachmentsAccess": {"type": "boolean", "value": False},
                                              "IntranetAttachmentsAccess": {"type": "boolean", "value": False},
                                              "IsConsolidationEnabled": {"type": "boolean", "value": False},
                                          }},
                        "DocumentId": {"type": "number"},
                        "OrderId": {"type": "number", "value": 0},
                        "OrderItemId": {"type": "number", "value": 0},
                        "OrderItemTypeId": {"type": "number", "value": 0},
                        "Sequence": {"type": "number", "value": 1},
                        "OrderNumber": {"type": "string", "value": "NOT MAPPED"},
                        "Number": {"type": "string", "value": ""},
                        "Year": {"type": "string", "value": now.strftime("%Y")},
                        "ApplicationNumber": {"type": "null"},
                        "DocumentType": {"type": "object",
                                         "properties": {
                                             "Key": {"type": "number", "value": 0},
                                             "Value": {"type": "string", "value": ""}
                                         }},
                        "OrderItemTypeIdIsAllowed": {"type": "boolean", "value": True},
                        "NeedToUpdatePath": {"type": "boolean", "value": True},
                        "IsNewOrderDocument": {"type": "boolean", "value": False},
                        "IsDocumentMapped": {"type": "boolean", "value": False},
                        "IsOnRecaptureOrCanceled": {"type": "boolean", "value": False},
                        "CaptureAndIndexAvailable": {"type": "boolean", "value": False},
                        "IsPurgeAvaliable": {"type": "boolean", "value": False},
                        "IsUploadable": {"type": "boolean", "value": False},
                        "HasOrderItemWithPriorStep": {"type": "boolean", "value": False},
                        "IsHistoricalDocumentForCapture": {"type": "boolean", "value": False},
                        "HasSystemAttachmentForCapture": {"type": "boolean", "value": False},
                        "Book": {"type": "null"},
                        "Pages": {"type": "number", "value": 0},
                        "FileSize": {"type": "number", "value": 0},
                        "SeparationType": {"type": "number", "value": 1},
                        "Scanned": {"type": "number", "value": self.api_test_data.pages},
                        "ScanDate": {"type": "string", "value": f"^{now.strftime('%Y-%m-%dT')}.*?$"},
                        "RecordedYear": {"type": "string", "value": now.strftime('%Y-01-01T00:00:00')},
                        "Status": {"type": "string", "value": "Scanned"},
                        "Path": {"type": "string", "pattern": fr"^.*?\.tiff$"},
                        "Content": {"type": "null"},
                        "ReprocessingReason": {"type": "null"},
                        "ReprocessingRemarks": {"type": "null"},
                        "RelativePathKind": {"type": "null"},
                        "Document": {"type": "null"},
                        "pageList": {"type": "null"},
                        "Suffix": {"type": "null"},
                        "RecaptureAttachmentName": {"type": "null"},
                        "ScanTaskId": {"type": "number", "value": self.get("portal_scanner_id")},
                    }
                }},
            }
        }

    def __before__(self):
        self.run_dependencies(("portal_scanner_id",))

    def __test__(self):
        self.set_content_type('application/json')
        scan_is_finished, counter, error = False, 20, None
        while (not scan_is_finished) and counter:
            try:
                self.response = self.session.get(self.get_url(self.api_urls.GetLastScannedFiles), params=self.post_data)
                assert self.response.status_code == 200, f"Actual response status: {self.response.status_code}"
                error, sif = None, self.response.json().get("ScanIsFinished", False)
                scan_is_finished = sif and bool(self.response.json()["scannedFiles"])
            except Exception as e:
                error, scan_is_finished = e, False
            counter -= 1
            self.actions.wait(3)
        if not scan_is_finished:
            self.response = self.session.post(self.get_url(self.api_urls.StopBatchScan),
                                              json=self.get("portal_scanner_id"))
            assert self.response.status_code == 200, f"Actual response status: {self.response.status_code}"
            self.set("portal_scanner_id", None)
        assert not error, error
        assert scan_is_finished
        self.validate(instance=self.response.json(), schema=self.schema)

        files = self.response.json()["scannedFiles"][0]
        self.set("portal_document_id", files["DocumentId"])
        self.set("portal_azure_file_path", files["Path"])
        self.set("portal_scan_date", files["ScanDate"])


if __name__ == '__main__':
    run_test(__file__, browser="none")
